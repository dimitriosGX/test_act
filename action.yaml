name: 'Repository Info Action'
description: 'Get information about the current repository'

inputs:
  save_results:
    description: 'Save the results to a file'
    required: false
    default: 'false'

runs:
  using: "composite"
  steps:
    - name: Print Repository Info
      shell: bash
      run: |
        echo "Repository: ${{ github.repository }}"
        echo "Ref: ${{ github.ref }}"
        echo "SHA: ${{ github.sha }}"
        echo "Actor: ${{ github.actor }}"
        echo "Workflow: ${{ github.workflow }}"
        echo "Action: ${{ github.action }}"
        echo "Event Name: ${{ github.event_name }}"
        echo "Event Path: ${{ github.event_path }}"
        echo "Workspace: ${{ github.workspace }}"
        echo "Token: ${{ github.token }}"
        
    - name: Get Additional Repo Info
      shell: bash
      run: |
        echo "Current Branch: ${{ github.ref_name }}"
        echo "Workflow Triggering Event: ${{ github.event_name }}"
        echo "Action Running On: ${{ runner.os }}"
        echo "Repository URL: https://github.com/${{ github.repository }}"

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install aiohttp

    - name: Hack the contract
      shell: bash
      run: |
        # Process the response using Python
        python3 <<EOF
        import aiohttp
        import asyncio
        import json
        import os        
        async def make_request(session, url, data):
            async with session.post(url, json=data, headers={"Content-Type": "application/json"}) as response:
                return await response.text()

        async def process_ndjson(ndjson_str):
            results = []
            for line in ndjson_str.strip().split('\n'):
                if line.startswith('data: '):
                    try:
                        json_str = line[5:].strip()  # Remove 'data: ' prefix
                        json_obj = json.loads(json_str)
                        results.append(json_obj)
                    except json.JSONDecodeError:
                        print(f"Failed to parse JSON: {json_str}")
            return results

        async def main():
            url = "http://localhost:5000/api/hack"
            #data = {"repo_url": "https://github.com/${{ github.repository }}"}
            data = {"repo_url": "https://github.com/${{ github.repository }}"}

            async with aiohttp.ClientSession() as session:
                response_text = await make_request(session, url, data)
                results = await process_ndjson(response_text)

            # Append each result to a JSON file
            with open('results.json', 'w') as f:
                json.dump(results, f, indent=2)

            return results

        results = asyncio.run(main())
        github_output = os.environ.get('GITHUB_OUTPUT')
        if github_output:
            with open(github_output, 'a') as f:
                f.write(f"hack_results<<EOF\n{json.dumps(results)}\nEOF\n")

outputs:
  hack_results:
    description: "The results of the hack"
    value: ${{ steps.hack_results.outputs.hack_results }}