name: 'Repository Info Action'
description: 'Get information about the current repository'

runs:
  using: "composite"
  steps:
    - name: Print Repository Info
      shell: bash
      run: |
        echo "Repository: ${{ github.repository }}"
        echo "Ref: ${{ github.ref }}"
        echo "SHA: ${{ github.sha }}"
        echo "Actor: ${{ github.actor }}"
        echo "Workflow: ${{ github.workflow }}"
        echo "Action: ${{ github.action }}"
        echo "Event Name: ${{ github.event_name }}"
        echo "Event Path: ${{ github.event_path }}"
        echo "Workspace: ${{ github.workspace }}"
        echo "Token: ${{ github.token }}"
        
    - name: Get Additional Repo Info
      shell: bash
      run: |
        echo "Current Branch: ${{ github.ref_name }}"
        echo "Workflow Triggering Event: ${{ github.event_name }}"
        echo "Action Running On: ${{ runner.os }}"
        echo "Repository URL: https://github.com/${{ github.repository }}"

    - name: Get results from curl call
      shell: bash
      run: |
        RESPONSE=$(curl -X POST http://localhost:5000/api/hack \
        -H "Content-Type: application/json" \
        -d '{"repo_url": "https://github.com/${{ github.repository }}"}')
        
        # Process the response using Python
        python3 <<EOF
import json
import re

response = """$RESPONSE"""

# Split the response into individual data entries
data_entries = re.split(r'(?=^data: )', response, flags=re.MULTILINE)

# Process each data entry
json_objects = []
for entry in data_entries:
    if entry.startswith('data: '):
        # Remove the 'data: ' prefix and parse as JSON
        json_str = entry[6:].strip()
        try:
            json_obj = json.loads(json_str)
            json_objects.append(json_obj)
        except json.JSONDecodeError:
            print(f"Failed to parse JSON: {json_str}")

# Write the JSON array to a file
with open('response.json', 'w') as f:
    json.dump(json_objects, f, indent=2)

print("Response saved to response.json")
print("Contents of response.json:")
with open('response.json', 'r') as f:
    print(f.read())
EOF

    - name: Extract markdown from response.json
      shell: bash
      run: |
        # Extract markdown content from response.json
        jq -r '.bug_title' response.json | while read -r title; do
          echo "# $title"
          echo
          jq -r --arg title "$title" 'select(.bug_title == $title) | .bug_description' response.json
          echo
          echo "---"
          echo
        done > results.md
        
        echo "Markdown content extracted from bugs.json and saved to results.md"
    # - name: Run script
    #   shell: bash
    #   run: |
    #     python3 dist/index.py


outputs:
  repo_full_name:
    description: "The full name of the repository"
    value: ${{ github.repository }}